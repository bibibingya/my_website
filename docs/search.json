[
  {
    "objectID": "resume.html",
    "href": "resume.html",
    "title": "Resume",
    "section": "",
    "text": "Download PDF file."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Emma Wu",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "My Projects",
    "section": "",
    "text": "Project 1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPoisson Regression Examples\n\n\n\n\n\n\nEmma Wu\n\n\nMay 7, 2025\n\n\n\n\n\n\n\n\n\n\n\n\nA Replication of Karlan and List (2007)\n\n\n\n\n\n\nEmma Wu\n\n\nApr 22, 2025\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "blog/project1/index.html",
    "href": "blog/project1/index.html",
    "title": "Project 1",
    "section": "",
    "text": "I cleaned some data\n\n\n\nI analyzed the data\n#| message: false\nlibrary(tidyverse) mtcars |&gt; ggplot(aes(x=wt, y=mpg))+ geom_point() |"
  },
  {
    "objectID": "blog/project1/index.html#section-1-data",
    "href": "blog/project1/index.html#section-1-data",
    "title": "Project 1",
    "section": "",
    "text": "I cleaned some data"
  },
  {
    "objectID": "blog/project1/index.html#section-2-analysis",
    "href": "blog/project1/index.html#section-2-analysis",
    "title": "Project 1",
    "section": "",
    "text": "I analyzed the data\n#| message: false\nlibrary(tidyverse) mtcars |&gt; ggplot(aes(x=wt, y=mpg))+ geom_point() |"
  },
  {
    "objectID": "blog/project2/index.html",
    "href": "blog/project2/index.html",
    "title": "A Replication of Karlan and List (2007)",
    "section": "",
    "text": "Karlan and List conducted a large-scale natural field experiment with over 50,000 previous donors to a liberal nonprofit in the U.S. Each donor was randomly assigned to receive one of several fundraising letters. The control group received a standard letter, while treatment groups received letters offering a matching grant, where a “concerned member” would match donations at 1:1, 2:1, or 3:1. These letters also varied in the maximum match amount ($25,000, $50,000, $100,000, or not stated) and the suggested donation amount, which was based on each donor’s past contributions.\nThis setup allowed the researchers to test whether lowering the “price” of giving through matching offers increased donations. They also studied how the effects varied by political affiliation (red vs. blue states), donor history, and demographic characteristics. The findings have practical value for fundraisers and offer new insights into altruism and public goods theory.\n\n\n\n\n\n\n\nFactor\nLevels\n\n\n\n\nMatch ratio\n1:1, 2:1, 3:1\n\n\nMaximum pledge\n$25k, $50k, $100k, or unstated\n\n\nExample ask amount\nDonor’s highest previous gift, 1.25× that gift, 1.50× that gift\n\n\n\nThis project seeks to replicate their results."
  },
  {
    "objectID": "blog/project2/index.html#section-1-data",
    "href": "blog/project2/index.html#section-1-data",
    "title": "Homework 1",
    "section": "",
    "text": "I cleaned some data"
  },
  {
    "objectID": "blog/project2/index.html#section-2-analysis",
    "href": "blog/project2/index.html#section-2-analysis",
    "title": "Homework 1",
    "section": "",
    "text": "I analyzed the data\n#| message: false\nlibrary(tidyverse) mtcars |&gt; ggplot(aes(x=wt, y=mpg))+ geom_point() |"
  },
  {
    "objectID": "blog/project2/index.html#introduction",
    "href": "blog/project2/index.html#introduction",
    "title": "A Replication of Karlan and List (2007)",
    "section": "",
    "text": "Karlan and List conducted a large-scale natural field experiment with over 50,000 previous donors to a liberal nonprofit in the U.S. Each donor was randomly assigned to receive one of several fundraising letters. The control group received a standard letter, while treatment groups received letters offering a matching grant, where a “concerned member” would match donations at 1:1, 2:1, or 3:1. These letters also varied in the maximum match amount ($25,000, $50,000, $100,000, or not stated) and the suggested donation amount, which was based on each donor’s past contributions.\nThis setup allowed the researchers to test whether lowering the “price” of giving through matching offers increased donations. They also studied how the effects varied by political affiliation (red vs. blue states), donor history, and demographic characteristics. The findings have practical value for fundraisers and offer new insights into altruism and public goods theory.\n\n\n\n\n\n\n\nFactor\nLevels\n\n\n\n\nMatch ratio\n1:1, 2:1, 3:1\n\n\nMaximum pledge\n$25k, $50k, $100k, or unstated\n\n\nExample ask amount\nDonor’s highest previous gift, 1.25× that gift, 1.50× that gift\n\n\n\nThis project seeks to replicate their results."
  },
  {
    "objectID": "blog/project2/index.html#data",
    "href": "blog/project2/index.html#data",
    "title": "A Replication of Karlan and List (2007)",
    "section": "Data",
    "text": "Data\n\nDescription\n\n\nCode\nimport pandas as pd\ndf = pd.read_stata('/Users/bibibingya/Downloads/emw_marketing_analytics/blog/project2/karlan_list_2007.dta')\nvariables_to_test = ['mrm2', 'years', 'freq', 'female']\n\n\nThis dataset contains information from a large-scale natural field experiment conducted by Karlan and List (2007) to study charitable giving behavior. It includes 50,083 observations and 51 variables related to donation behavior, treatment assignments, demographics, and geographic context.\nEach row represents an individual who received a fundraising letter. Key variables include:\n\nTreatment assignment (treatment, control, ratio, size, ask)\nDonation outcome (gave, amount, amountchange)\nDonor characteristics (e.g., female, freq, years, mrm2)\nCensus and geographic info (pwhite, median_hhincome, redcty, etc.)\n\nThere are some missing values in the demographic and geographic variables (e.g., pwhite, median_hhincome), but core variables like gave and treatment are complete.\nThis dataset supports analysis of how different fundraising strategies—such as offering matching donations or suggesting different donation amounts—affect donor response rates and amounts given.\n\n\n\n\n\n\nVariable Definitions\n\n\n\n\n\n\n\n\n\n\n\n\nVariable\nDescription\n\n\n\n\ntreatment\nTreatment\n\n\ncontrol\nControl\n\n\nratio\nMatch ratio\n\n\nratio2\n2:1 match ratio\n\n\nratio3\n3:1 match ratio\n\n\nsize\nMatch threshold\n\n\nsize25\n$25,000 match threshold\n\n\nsize50\n$50,000 match threshold\n\n\nsize100\n$100,000 match threshold\n\n\nsizeno\nUnstated match threshold\n\n\nask\nSuggested donation amount\n\n\naskd1\nSuggested donation was highest previous contribution\n\n\naskd2\nSuggested donation was 1.25 x highest previous contribution\n\n\naskd3\nSuggested donation was 1.50 x highest previous contribution\n\n\nask1\nHighest previous contribution (for suggestion)\n\n\nask2\n1.25 x highest previous contribution (for suggestion)\n\n\nask3\n1.50 x highest previous contribution (for suggestion)\n\n\namount\nDollars given\n\n\ngave\nGave anything\n\n\namountchange\nChange in amount given\n\n\nhpa\nHighest previous contribution\n\n\nltmedmra\nSmall prior donor: last gift was less than median $35\n\n\nfreq\nNumber of prior donations\n\n\nyears\nNumber of years since initial donation\n\n\nyear5\nAt least 5 years since initial donation\n\n\nmrm2\nNumber of months since last donation\n\n\ndormant\nAlready donated in 2005\n\n\nfemale\nFemale\n\n\ncouple\nCouple\n\n\nstate50one\nState tag: 1 for one observation of each of 50 states; 0 otherwise\n\n\nnonlit\nNonlitigation\n\n\ncases\nCourt cases from state in 2004-5 in which organization was involved\n\n\nstatecnt\nPercent of sample from state\n\n\nstateresponse\nProportion of sample from the state who gave\n\n\nstateresponset\nProportion of treated sample from the state who gave\n\n\nstateresponsec\nProportion of control sample from the state who gave\n\n\nstateresponsetminc\nstateresponset - stateresponsec\n\n\nperbush\nState vote share for Bush\n\n\nclose25\nState vote share for Bush between 47.5% and 52.5%\n\n\nred0\nRed state\n\n\nblue0\nBlue state\n\n\nredcty\nRed county\n\n\nbluecty\nBlue county\n\n\npwhite\nProportion white within zip code\n\n\npblack\nProportion black within zip code\n\n\npage18_39\nProportion age 18-39 within zip code\n\n\nave_hh_sz\nAverage household size within zip code\n\n\nmedian_hhincome\nMedian household income within zip code\n\n\npowner\nProportion house owner within zip code\n\n\npsch_atlstba\nProportion who finished college within zip code\n\n\npop_propurban\nProportion of population urban within zip code\n\n\n\n\n\n\n\n\nBalance Test\nAs an ad hoc test of the randomization mechanism, I provide a series of tests that compare aspects of the treatment and control groups to assess whether they are statistically significantly different from one another.\nI tested four pre-treatment variables—mrm2 (months since last donation), years (years since initial donation), freq (number of prior donations), and female (binary gender indicator)—using two methods:\n\nTwo-sample t-tests\nSimple linear regressions\n\n\n\nCode\nimport pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\nfrom scipy import stats\ndf = pd.read_stata('/Users/bibibingya/Downloads/emw_marketing_analytics/blog/project2/karlan_list_2007.dta')\nvariables_to_test = ['mrm2', 'years', 'freq', 'female']\n\nresults = []\n\nfor var in variables_to_test:\n    treat = df[df['treatment'] == 1][var].dropna()\n    control = df[df['treatment'] == 0][var].dropna()\n\n    diff = treat.mean() - control.mean()\n    se = np.sqrt(treat.var(ddof=1)/len(treat) + control.var(ddof=1)/len(control))\n    t_manual = diff / se\n    df_t = len(treat) + len(control) - 2\n    p_manual = 2 * (1 - stats.t.cdf(abs(t_manual), df_t))\n\n    reg_df = df[[var, 'treatment']].dropna()\n    X = sm.add_constant(reg_df['treatment'])\n    y = reg_df[var]\n    model = sm.OLS(y, X).fit()\n    \n    results.append({\n        \"Variable\": var,\n        \"Mean Difference\": round(diff, 4),\n        \"T-stat (manual)\": round(t_manual, 4),\n        \"P-value (manual)\": round(p_manual, 4),\n        \"Coef (regression)\": round(model.params['treatment'], 4),\n        \"T-stat (regression)\": round(model.tvalues['treatment'], 4),\n        \"P-value (regression)\": round(model.pvalues['treatment'], 4)\n    })\n\nresults_df = pd.DataFrame(results)\n\nprint(\"Baseline Balance Table (Treatment vs Control):\")\ndisplay(results_df)\n\n\nBaseline Balance Table (Treatment vs Control):\n\n\n\n\n\n\n\n\n\nVariable\nMean Difference\nT-stat (manual)\nP-value (manual)\nCoef (regression)\nT-stat (regression)\nP-value (regression)\n\n\n\n\n0\nmrm2\n0.0137\n0.1195\n0.9049\n0.0137\n0.1195\n0.9049\n\n\n1\nyears\n-0.0575\n-1.0909\n0.2753\n-0.0575\n-1.1030\n0.2700\n\n\n2\nfreq\n-0.0120\n-0.1108\n0.9117\n-0.0120\n-0.1109\n0.9117\n\n\n3\nfemale\n-0.0075\n-1.7535\n0.0795\n-0.0075\n-1.7584\n0.0787\n\n\n\n\n\n\n\nBoth approaches gave consistent results: no variable showed a statistically significant difference between groups at the 95% confidence level. These findings are consistent with Table 1 of the paper, where the means and standard deviations are visually similar across treatment and control conditions.\nThis reassures us that any observed differences in outcomes later on are unlikely to be driven by pre-existing differences, reinforcing the credibility of our causal claims."
  },
  {
    "objectID": "blog/project2/index.html#simulation-experiment",
    "href": "blog/project2/index.html#simulation-experiment",
    "title": "A Replication of Karlan and List (2007)",
    "section": "Simulation Experiment",
    "text": "Simulation Experiment\nAs a reminder of how the t-statistic “works,” in this section I use simulation to demonstrate the Law of Large Numbers and the Central Limit Theorem.\nSuppose the true distribution of respondents who do not get a charitable donation match is Bernoulli with probability p=0.018 that a donation is made.\nFurther suppose that the true distribution of respondents who do get a charitable donation match of any size is Bernoulli with probability p=0.022 that a donation is made.\n\nLaw of Large Numbers\nTo illustrate the Law of Large Numbers (LLN), I simulated donation behavior using binary outcomes based on the actual probabilities observed in the experiment:\n\n\nCode\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nnp.random.seed(42)\n\ncontrol_draws = np.random.binomial(1, 0.018, 100000)\ntreatment_draws = np.random.binomial(1, 0.022, 10000)\n\ncontrol_sample = np.random.choice(control_draws, size=10000, replace=False)\n\ndifferences = treatment_draws - control_sample\ncumulative_avg = np.cumsum(differences) / np.arange(1, len(differences) + 1)\n\nplt.figure(figsize=(10, 5))\nplt.plot(cumulative_avg, color=\"blue\", linewidth=1)\nplt.axhline(y=0.004, color='red', linestyle='--', label='True Difference 0.004')\nplt.title(\"Cumulative Average of Differences: Treatment vs. Control\")\nplt.xlabel(\"Number of Simulations\")\nplt.ylabel(\"Cumulative Average Difference\")\nplt.legend()\nplt.grid(True)\n\n\n\n\n\n\n\n\n\nThis plot clearly demonstrates the Law of Large Numbers in action, showing that as the number of samples increases, the cumulative average of the differences steadily converges toward the true population mean. Despite early fluctuations due to sampling noise, the average stabilizes with more observations, illustrating how even noisy individual data can produce accurate and reliable estimates of treatment effects when the sample size is sufficiently large.\n\n\nCentral Limit Theorem\nTo visualize how the sampling distribution of the average difference behaves, I simulated four experiments using increasing sample sizes: 50, 200, 500, and 1000. In each simulation, I took samples from both the control and treatment groups (with known donation probabilities of 1.8% and 2.2%), calculated their average difference, and repeated this process 1000 times. The histograms below show the distribution of these differences at each sample size.\n\n\nCode\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nnp.random.seed(42)\n\ncontrol_p = 0.018\ntreatment_p = 0.022\nsample_sizes = [50, 200, 500, 1000]\nn_simulations = 1000\n\nsimulated_distributions = {}\n\nfor n in sample_sizes:\n    avg_diffs = []\n    for _ in range(n_simulations):\n        control = np.random.binomial(1, control_p, n)\n        treatment = np.random.binomial(1, treatment_p, n)\n        avg_diffs.append(np.mean(treatment) - np.mean(control))\n    simulated_distributions[n] = avg_diffs\n\nfig, axes = plt.subplots(2, 2, figsize=(12, 8))\naxes = axes.flatten()\n\nfor i, n in enumerate(sample_sizes):\n    diffs = simulated_distributions[n]\n    axes[i].hist(diffs, bins=50, color=\"lightblue\", edgecolor=\"black\", density=True)\n    axes[i].axvline(0, color='red', linestyle='--', linewidth=2, label='Zero')\n    axes[i].axvline(np.mean(diffs), color='green', linestyle='-', linewidth=2, label='Mean')\n    axes[i].set_title(f\"Sample Size = {n}\")\n    axes[i].set_xlabel(\"Avg Difference (Treatment - Control)\")\n    axes[i].set_ylabel(\"Density\")\n    axes[i].legend()\n\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\nAs we can see, when the sample size is small (n = 50), the distribution is wide and noisy, and the value of zero is often near the center—indicating we might fail to detect any effect. However, as the sample size increases, the distributions become narrower and more centered around the true mean difference (~0.004), pushing zero toward the tails. This demonstrates the Central Limit Theorem: with larger sample sizes, the distribution of the sample mean becomes more normal and concentrated, making it easier to detect small but real differences in behavior."
  },
  {
    "objectID": "blog/project2/index.html#experimental-results",
    "href": "blog/project2/index.html#experimental-results",
    "title": "A Replication of Karlan and List (2007)",
    "section": "Experimental Results",
    "text": "Experimental Results\n\nCharitable Contribution Made\nFirst, I analyze whether matched donations lead to an increased response rate of making a donation.\n\n\nCode\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndf = pd.read_stata(\"karlan_list_2007.dta\")\nrates = df.groupby(\"treatment\")[\"gave\"].mean()\n\nlabels = [\"Control\", \"Treatment\"]\nvalues = [rates[0], rates[1]]\n\nplt.figure(figsize=(6, 5))\nbars = plt.bar(labels, values, color=[\"lightgreen\", \"skyblue\"], edgecolor=\"black\")\nplt.ylim(0, max(values) + 0.005)  \nplt.ylabel(\"Proportion Who Donated\")\nplt.title(\"Donation Rates by Group\")\n\nfor bar in bars:\n    height = bar.get_height()\n    plt.text(bar.get_x() + bar.get_width() / 2,\n             height - 0.001,  \n             f\"{height:.3f}\",\n             ha='center', va='top')\n\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\nBased on the barplot above, we can compare donation behavior between individuals who received different versions of a fundraising letter. Those in the control group received a standard letter with no mention of matching, while those in the treatment group were offered a matching donation incentive. Although donation rates were low overall, the group offered a match donated at a slightly higher rate (2.2%) compared to the group without a match (1.8%). This small but consistent difference reflects the experiment’s design and suggests that matching incentives can modestly increase the likelihood of giving.\n\n\nCode\nimport pandas as pd\nimport scipy.stats as stats\nimport statsmodels.api as sm\n\ndf = pd.read_stata(\"karlan_list_2007.dta\")\n\ntreat = df[df[\"treatment\"] == 1][\"gave\"]\ncontrol = df[df[\"treatment\"] == 0][\"gave\"]\n\nt_stat, p_val = stats.ttest_ind(treat, control, equal_var=False)\n\nX = sm.add_constant(df[\"treatment\"])\ny = df[\"gave\"]\nmodel = sm.OLS(y, X).fit()\n\nprint(f\"T-stat: {t_stat:.4f}, P-value: {p_val:.4f}\")\nprint(model.summary())\n\n\n\n\nCode\nimport statsmodels.api as sm\nimport pandas as pd\n\ndf = pd.read_stata(\"karlan_list_2007.dta\")\n\nX = sm.add_constant(df[\"treatment\"])  # Add intercept\ny = df[\"gave\"]\n\nprobit_model = sm.Probit(y, X).fit()\n\nprint(probit_model.summary())\n\n\n\n\n\nMethod\nDiff (%-points)\nt / t-stat\np-value\n\n\n\n\nt-test\n0.418\n3.209\n0.001\n\n\nOLS\n0.418\n3.101\n0.002\n\n\n\nThis table compares the results of a t-test and an OLS regression, both examining whether offering a donation match increases the likelihood of giving. In both methods, the treatment group shows a slightly higher donation rate—about 0.42 percentage points more than the control group. Although the effect is small, it is statistically significant, meaning it is unlikely to be due to chance. This suggests that even a simple intervention, like offering to match a donation, can meaningfully influence behavior and make people more likely to donate.\nThen, I ran a probit regression where the outcome variable is whether a person donated (gave), and the explanatory variable is whether they were assigned to receive a matching offer (treatment). The results below are based on the latent (probit) scale.\n\n\nCode\nimport pandas as pd\nimport statsmodels.api as sm\n\n# Load the dataset\ndf = pd.read_stata(\"karlan_list_2007.dta\")\n\n# Define the outcome and predictor\nX = sm.add_constant(df[\"treatment\"])  # add intercept\ny = df[\"gave\"]\n\n# Run Probit regression\nprobit_model = sm.Probit(y, X).fit()\n\n# Show summary\nprint(probit_model.summary())\n\n\n\n\n\n\n\n\n\n\n\n\n\nVariable\nCoef.\nStd. Err.\nz-value\np-value\n95% CI\n\n\n\n\nIntercept\n-2.1001\n0.023\n-90.073\n0.000\n[-2.146, -2.055]\n\n\nTreatment\n0.0868\n0.028\n3.113\n0.002\n[0.032, 0.141]\n\n\n\nThe positive and statistically significant coefficient on treatment indicates that being assigned to receive a matching offer increases the likelihood of donation. While this estimate is on the latent (probit) scale, the significance (p = 0.002) confirms a clear effect.\nTo translate this to a change in predicted probability, we can compute the marginal effect (see below).\n\n\nCode\nimport statsmodels.api as sm\nfrom statsmodels.discrete.discrete_model import Probit\nimport pandas as pd\n\ndf = pd.read_stata(\"karlan_list_2007.dta\")\n# Fit probit model\nprobit_mod = Probit(df[\"gave\"], sm.add_constant(df[\"treatment\"])).fit()\n\n# Average marginal effect\name = probit_mod.get_margeff(at=\"overall\").summary_frame()\name.round(3)\n\n\nOptimization terminated successfully.\n         Current function value: 0.100443\n         Iterations 7\n\n\n\n\n\n\n\n\n\ndy/dx\nStd. Err.\nz\nPr(&gt;|z|)\nConf. Int. Low\nCont. Int. Hi.\n\n\n\n\ntreatment\n0.004\n0.001\n3.104\n0.002\n0.002\n0.007\n\n\n\n\n\n\n\nOffering to match a donor’s gift really does make a difference. According to the probit model, just mentioning a match increases the chance that someone donates—even if only slightly. The effect isn’t dramatic, but it’s consistent: the data show a small bump in giving, enough to matter when scaled across thousands of people. This result lines up with what Karlan & List found in their original study, reinforcing the idea that a well-timed nudge, like a matching offer, can turn hesitation into action for a noticeable group of potential donors.\n\n\nDifferences between Match Rates\nNext, I assess the effectiveness of different sizes of matched donations on the response rate. To evaluate how the size of the match ratio influences donation behavior, I compared response rates across match conditions using both t-tests and logistic regression.\n\nT-Test Results\nI first conducted pairwise t-tests comparing the proportion of individuals who donated (gave) under different match ratios:\n\n\nCode\nimport pandas as pd\nfrom scipy.stats import ttest_1samp\n\n# Load and filter to treatment group\ndf = pd.read_stata('/Users/bibibingya/Downloads/emw_marketing_analytics/blog/project2/karlan_list_2007.dta')\ntreatment_only = df[df['treatment'] == 1].copy()\n\n# Create table to summarize each match ratio group\nsummary = []\n\nfor ratio_val in [1, 2, 3]:\n    group = treatment_only[treatment_only['ratio'] == ratio_val]['gave'].dropna()\n    mean_gave = group.mean()\n    std_err = group.std(ddof=1) / len(group)**0.5\n    t_stat, p_val = ttest_1samp(group, 0)  # test against 0 for formality\n\n    summary.append({\n        \"Match Ratio\": f\"{ratio_val}:1\",\n        \"Mean Gave\": round(mean_gave, 4),\n        \"N\": len(group),\n        \"Std. Error\": round(std_err, 4),\n        \"t-stat\": round(t_stat, 4),\n        \"p-value\": round(p_val, 4)\n    })\n\nresults_df = pd.DataFrame(summary)\nresults_df\n\n\n\n\n\n\n\n\n\nMatch Ratio\nMean Gave\nN\nStd. Error\nt-stat\np-value\n\n\n\n\n0\n1:1\n0.0207\n11133\n0.0014\n15.3582\n0.0\n\n\n1\n2:1\n0.0226\n11134\n0.0014\n16.0565\n0.0\n\n\n2\n3:1\n0.0227\n11129\n0.0014\n16.0892\n0.0\n\n\n\n\n\n\n\nAll three match ratio groups — 1:1, 2:1, and 3:1 — have statistically significant donation rates, with p-values effectively equal to zero. This means that, for each group, the proportion of people who donated is significantly greater than zero. However, while the donation rates increase slightly from 1:1 (2.07%) to 3:1 (2.27%), the differences between the groups are very small in absolute terms — less than two-tenths of a percentage point.\nThis result suggests that offering any matching donation significantly boosts response rates compared to no offer, but increasing the match ratio beyond 1:1 offers little to no additional benefit. These findings support the authors’ claim that larger match ratios had no additional impact beyond the initial incentive.\n\n\n\nLogistic Regression\nNext, I ran a logistic regression to model the probability of donating as a function of match ratio:\n\n\nCode\nimport pandas as pd\nimport statsmodels.formula.api as smf\n\n# Load data and filter to treatment group only\ndf = pd.read_stata(\"karlan_list_2007.dta\")\nmt = df[df[\"treatment\"] == 1].copy()\n\n# Create clean dummy for 1:1 ratio\nmt[\"ratio1\"] = (mt[\"ratio\"] == 1).astype(int)\n# ratio2 and ratio3 are assumed to already exist as binary flags\n\n# Run OLS without an intercept → each coef = group mean\nreg = smf.ols(\"gave ~ ratio1 + ratio2 + ratio3 - 1\", data=mt).fit()\n\n# Print result\nreg.summary2().tables[1].round(4)\n\n\n\n\n\n\n\n\n\nCoef.\nStd.Err.\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\n\n\nratio1\n0.0207\n0.0014\n14.9122\n0.0\n0.0180\n0.0235\n\n\nratio2\n0.0226\n0.0014\n16.2671\n0.0\n0.0199\n0.0254\n\n\nratio3\n0.0227\n0.0014\n16.3354\n0.0\n0.0200\n0.0255\n\n\n\n\n\n\n\nThe table summarizes how donation rates vary across different match ratio offers (1:1, 2:1, 3:1). Each coefficient represents the proportion of people who donated under a specific match condition. The results are all statistically significant, meaning these donation rates are clearly above zero and unlikely to be due to chance.\n\n1:1 match: 2.07% of people donated\n2:1 match: 2.26% donated\n3:1 match: 2.27% donated\n\nAlthough donation rates are slightly higher with larger match ratios, the differences between the groups are very small—less than 0.2 percentage points. This suggests that offering any match does encourage giving, but increasing the match beyond 1:1 doesn’t significantly boost response rates. The findings support the idea that a simple match offer is enough to motivate donors, while higher match ratios add little extra impact.\n\n\n\nInterpretation of Coefficients\nTo understand how match size affects giving, I compared donation rates between the 1:1, 2:1, and 3:1 match groups using two methods:\n\nDirect from the data: I calculated the mean of the gave variable for each match group (within the treatment group).\nFrom the regression model: Since each coefficient in the no-intercept OLS regression represents the donation rate for that group, I subtracted the coefficients to compute differences.\n\n\n\nShow code for response-rate differences\nimport pandas as pd\nfrom scipy.stats import ttest_1samp\n\n# Load and filter treatment group\ndf = pd.read_stata(\"karlan_list_2007.dta\")\ntreated = df[df[\"treatment\"] == 1].copy()\n\n# Calculate mean donation rates for each match ratio\nmeans = treated.groupby(\"ratio\")[\"gave\"].mean()\n\n# Extract donation rates\nrate_1_1 = means.loc[1]\nrate_2_1 = means.loc[2]\nrate_3_1 = means.loc[3]\n\n# Compute differences (in percentage points)\ndiff_21_11 = round((rate_2_1 - rate_1_1) * 100, 2)\ndiff_31_21 = round((rate_3_1 - rate_2_1) * 100, 2)\n\ndiff_table = pd.DataFrame({\n    \"Comparison\": [\"2:1 – 1:1\", \"3:1 – 2:1\"],\n    \"Difference (pp) direct\": [diff_21_11, diff_31_21],\n    \"Difference (pp) from reg\": [diff_21_11, diff_31_21]\n})\n\ndiff_table\n\n\n/var/folders/yf/g_800hts37z9ftxfvzrc1fc80000gn/T/ipykernel_14336/1559164577.py:9: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n  means = treated.groupby(\"ratio\")[\"gave\"].mean()\n\n\n\n\n\n\n\n\n\nComparison\nDifference (pp) direct\nDifference (pp) from reg\n\n\n\n\n0\n2:1 – 1:1\n0.19\n0.19\n\n\n1\n3:1 – 2:1\n0.01\n0.01\n\n\n\n\n\n\n\n\n\n\nConclusion\nAlthough donation rates are statistically significant in all groups, the differences between them are small. This suggests that simply offering a match boosts giving, but increasing the match ratio beyond 1:1 doesn’t significantly improve donation response. A basic match offer appears to be sufficient to motivate donors, making more generous ratios unnecessary from a cost-effectiveness standpoint.\n\n\n\nSize of Charitable Contribution\nIn this subsection, I analyze the effect of the size of matched donation on the size of the charitable contribution.\n\nUnconditional Analysis (All Participants)\nI first analyzed whether individuals in the treatment group donated more on average than those in the control group, regardless of whether they donated.\n\n\n\nMetric\nValue\n\n\n\n\nMean (Control Group)\n$0.813\n\n\nMean (Treatment Group)\n$0.967\n\n\nMean Difference (Treatment - Control)\n+$0.154\n\n\nP-value (T-Test)\n0.055\n\n\nTreatment Coefficient (Regression)\n0.1536 (p = 0.063)\n\n\n\nAlthough the treatment group gave slightly more, the difference is only marginally insignificant at the 5% level. This suggests the treatment may have increased average giving slightly, but the evidence is not conclusive. Since treatment was randomly assigned, this result can be interpreted as the causal effect of the treatment on the average donation amount.\n\n\nConditional Analysis (Donors Only)\nNext, I restricted the sample to only those who donated and repeated the analysis to evaluate the treatment’s effect on donation size among givers.\n\n\n\nMetric\nValue\n\n\n\n\nMean (Control Group)\n$45.54\n\n\nMean (Treatment Group)\n$43.87\n\n\nMean Difference (Treatment - Control)\n-$1.67\n\n\nP-value (T-Test)\n0.599\n\n\nTreatment Coefficient (Regression)\n−1.668 (p = 0.561)\n\n\n\nThe treatment group gave slightly less, but the difference is not statistically significant. There is no causal interpretation. Since we’re conditioning on a post-treatment behavior (having donated), this breaks randomization and introduces selection bias. Therefore, this result is descriptive only, not causal.\n\n\nCode\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndf = pd.read_stata('/Users/bibibingya/Downloads/emw_marketing_analytics/blog/project2/karlan_list_2007.dta')\n\ndonated_df = df[df['gave'] == 1]\n\ntreat = donated_df[donated_df['treatment'] == 1]['amount'].dropna()\ncontrol = donated_df[donated_df['treatment'] == 0]['amount'].dropna()\n\nmean_treat = treat.mean()\nmean_control = control.mean()\n\nfig, axes = plt.subplots(1, 2, figsize=(12, 5), sharey=True)\n\n# Treatment plot\naxes[0].hist(treat, bins=30, color='skyblue', edgecolor='black')\naxes[0].axvline(mean_treat, color='red', linestyle='--', linewidth=2, label=f'Mean = ${mean_treat:.2f}')\naxes[0].set_title('Treatment Group (Donors Only)')\naxes[0].set_xlabel('Donation Amount ($)')\naxes[0].set_ylabel('Frequency')\naxes[0].legend()\n\n# Control plot\naxes[1].hist(control, bins=30, color='lightgreen', edgecolor='black')\naxes[1].axvline(mean_control, color='red', linestyle='--', linewidth=2, label=f'Mean = ${mean_control:.2f}')\naxes[1].set_title('Control Group (Donors Only)')\naxes[1].set_xlabel('Donation Amount ($)')\naxes[1].legend()\n\nplt.tight_layout()\nplt.show()"
  },
  {
    "objectID": "blog/project2/index.html#conclusion-1",
    "href": "blog/project2/index.html#conclusion-1",
    "title": "A Replication of Karlan and List (2007)",
    "section": "Conclusion",
    "text": "Conclusion\nThis project explored how different fundraising strategies—especially the use of matching donations—influence charitable giving. Using data from a large-scale natural field experiment, I found that simply offering a match increases both the likelihood of donating and the average donation amount. However, increasing the match ratio beyond 1:1 (to 2:1 or 3:1) provided little to no additional impact. This pattern was confirmed across multiple methods, including t-tests, linear regressions, and probit models.\nThe findings suggest that the presence of a match matters more than the size of the match. In other words, offering any match can be a powerful behavioral nudge, but bigger incentives don’t necessarily lead to bigger results. For fundraisers, this means that even simple interventions can have a meaningful effect—and they don’t always need to be expensive to be effective."
  },
  {
    "objectID": "blog/project3/index.html",
    "href": "blog/project3/index.html",
    "title": "Poisson Regression Examples",
    "section": "",
    "text": "Blueprinty is a small firm that makes software for developing blueprints specifically for submitting patent applications to the US patent office. Their marketing team would like to make the claim that patent applicants using Blueprinty’s software are more successful in getting their patent applications approved. Ideal data to study such an effect might include the success rate of patent applications before using Blueprinty’s software and after using it. Unfortunately, such data is not available.\nHowever, Blueprinty has collected data on 1,500 mature (non-startup) engineering firms. The data include each firm’s number of patents awarded over the last 5 years, regional location, age since incorporation, and whether or not the firm uses Blueprinty’s software. The marketing team would like to use this data to make the claim that firms using Blueprinty’s software are more successful in getting their patent applications approved.\n\n\n\n\n\nCode\nimport pandas as pd\ndf = pd.read_csv('blueprinty.csv')\ndf.head()\n\n\n\n\nCode\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ndf = pd.read_csv('blueprinty.csv')\nmeans = df.groupby(\"iscustomer\")[\"patents\"].mean().reset_index()\nmeans.columns = [\"Customer Status\", \"Mean Patents\"]\n\nplt.figure(figsize=(10, 5))\n\nsns.histplot(data=df, x=\"patents\", hue=\"iscustomer\", bins=30,\n             element=\"step\", stat=\"density\", common_norm=False,\n             palette={0: \"skyblue\", 1: \"orange\"}, legend=True)\n\nplt.title(\"Histogram of Patents by Customer Status\")\nplt.xlabel(\"Number of Patents\")\nplt.ylabel(\"Density\")\nplt.legend(title=\"Customer Status\", labels=[\"Non-Customer\", \"Customer\"])\n\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\nCustomer Status\nMean Patents\n\n\n\n\nNon-Customer\n3.473013\n\n\nCustomer\n4.133056\n\n\n\nFrom the chart and table, we can see that Blueprinty customers tend to have more patents than non-customers. On average, customers have 4.13 patents, while non-customers have 3.47. The histogram shows that customers are more likely to appear in the higher end of the distribution.\nHowever, it’s important to remember that customers are not randomly selected. That means we cannot say for sure that being a customer causes someone to have more patents. It’s possible that customers are already different before joining—perhaps they are more experienced, innovative, or come from regions or industries with higher patent activity.\n\n\nCode\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\ndf = pd.read_csv(\"blueprinty.csv\") \n\nmean_age = df.groupby(\"iscustomer\")[\"age\"].mean().reset_index()\nmean_age.columns = [\"Customer Status\", \"Mean Age\"]\n\nregion_counts = pd.crosstab(df[\"region\"], df[\"iscustomer\"])\nregion_counts.columns = [\"Non-Customer\", \"Customer\"]\nregion_props = region_counts.div(region_counts.sum(axis=0), axis=1).round(3) \n\nplt.figure(figsize=(10, 4))\nsns.histplot(data=df, x=\"age\", hue=\"iscustomer\", bins=20, palette=[\"orange\", \"skyblue\"], element=\"step\")\nplt.title(\"Age Distribution by Customer Status\")\nplt.xlabel(\"Age\")\nplt.ylabel(\"Count\")\nplt.legend(title=\"Customer Status\", labels=[\"Non-Customer\", \"Customer\"])\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\nCustomer Status\nMean Age\n\n\n\n\nNon-Customer (0)\n26.10\n\n\nCustomer (1)\n26.90\n\n\n\nCustomers tend to be slightly older than non-customers. The age distribution plot shows that customers are more concentrated in the 20–35 age range, while non-customers are more evenly spread out. Although the difference is modest, it suggests that age may play a role in who becomes a customer, and should be considered when comparing outcomes like patent ownership.\n\n\nCode\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\ndf = pd.read_csv(\"blueprinty.csv\") \n\nregion_counts = pd.crosstab(df[\"region\"], df[\"iscustomer\"])\nregion_counts.columns = [\"Non-Customer\", \"Customer\"]\nregion_props = region_counts.div(region_counts.sum(axis=0), axis=1).round(3) \n\nregion_props.plot(kind=\"bar\", figsize=(10, 5), color=[\"#fdbf6f\", \"#a6cee3\"])  \nplt.title(\"Region Distribution by Customer Status\")\nplt.xlabel(\"Region\")\nplt.ylabel(\"Proportion within Group\")\nplt.legend(title=\"Customer Status\")\nplt.xticks(rotation=45)\nplt.tight_layout()\n\n\n\n\n\n\n\n\n\n\n\n\nRegion\nNon-Customer\nCustomer\n\n\n\n\nMidwest\n0.184\n0.077\n\n\nNortheast\n0.268\n0.682\n\n\nNorthwest\n0.155\n0.060\n\n\nSouth\n0.153\n0.073\n\n\nSouthwest\n0.240\n0.108\n\n\n\nThere are also notable differences in regional distribution. Customers are overwhelmingly concentrated in the Northeast (68%), whereas non-customers are more evenly distributed across regions, especially in the Midwest and Southwest. This uneven geographic pattern indicates that customer status is not random and may be influenced by location-based factors. As with age, region should be taken into account when analyzing differences between customers and non-customers.\n\n\n\nSince our outcome variable of interest can only be small integer values per a set unit of time, we can use a Poisson density to model the number of patents awarded to each engineering firm over the last 5 years. We start by estimating a simple Poisson model via Maximum Likelihood.\nSuppose we observe independent draws \\(Y_1, Y_2, \\dots, Y_n \\sim \\text{Poisson}(\\lambda)\\),\nwhere the probability mass function of the Poisson distribution is:\n\\(f(Y_i \\mid \\lambda) = \\dfrac{e^{-\\lambda} \\lambda^{Y_i}}{Y_i!}\\)\nThen, the likelihood function for the full sample is:\n\\(\\mathcal{L}(\\lambda) = \\prod_{i=1}^{n} f(Y_i \\mid \\lambda)\n= \\prod_{i=1}^{n} \\dfrac{e^{-\\lambda} \\lambda^{Y_i}}{Y_i!}\n= e^{-n\\lambda} \\lambda^{\\sum_{i=1}^{n} Y_i} \\prod_{i=1}^{n} \\dfrac{1}{Y_i!}\\)\nSince it’s easier to work with, we usually take the logarithm of the likelihood function.\nThis gives us the log-likelihood:\n\\(\\log \\mathcal{L}(\\lambda) = \\sum_{i=1}^{n} \\left( -\\lambda + Y_i \\log \\lambda - \\log(Y_i!) \\right)\n= -n\\lambda + \\left( \\sum_{i=1}^{n} Y_i \\right) \\log \\lambda - \\sum_{i=1}^{n} \\log(Y_i!)\\)\n\nTo better understand the relationship between λ (lambda) and the observed data, we now walk through a full maximum likelihood estimation process for the Poisson model.\n\n\nCode\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.optimize import minimize_scalar\nfrom scipy.special import gammaln\nimport pandas as pd\n\ndf = pd.read_csv(\"blueprinty.csv\")\nY = df[\"patents\"].values  \n\n# ---- Step 1: Define log-likelihood function ----\ndef poisson_loglikelihood(lam, Y):\n    if lam &lt;= 0:\n        return -np.inf\n    return np.sum(Y * np.log(lam) - lam - gammaln(Y + 1))\n\n# ---- Step 2: Plot lambda vs log-likelihood ----\nlambdas = np.linspace(0.1, 10, 200)\nloglik_values = [poisson_loglikelihood(lam, Y) for lam in lambdas]\n\nplt.figure(figsize=(8, 5))\nplt.plot(lambdas, loglik_values, label=\"Log-Likelihood\")\nplt.axvline(x=np.mean(Y), color='red', linestyle='--', label='MLE (mean of Y)')\nplt.title(\"Poisson Log-Likelihood vs Lambda\")\nplt.xlabel(\"Lambda\")\nplt.ylabel(\"Log-Likelihood\")\nplt.legend()\nplt.show()\n\n# ---- Step 3: Analytical MLE solution ----\nlambda_mle_analytical = np.mean(Y)\n\n# ---- Step 4: Numerical MLE using optimization ----\nneg_loglik = lambda lam: -poisson_loglikelihood(lam, Y)\nopt_result = minimize_scalar(neg_loglik, bounds=(0.01, 20), method='bounded')\n\nlambda_mle_numerical = opt_result.x\n\n# Collect results\nresults = {\n    \"Analytical MLE (mean of Y)\": round(lambda_mle_analytical, 4),\n    \"Numerical MLE (optimize)\": round(lambda_mle_numerical, 4)\n}\n\n\n\n\n\n\n\n\n\nThe plot above shows how the Poisson log-likelihood changes as we vary \\(\\lambda\\), the expected number of patents per firm. The curve reaches its peak at \\(\\lambda = 3.6847\\), which is the value that makes the observed data most likely — this is our Maximum Likelihood Estimate (MLE).\nThe table below confirms that both the analytical solution (sample mean) and the numerical optimization produce exactly the same MLE value. This gives us confidence that our model is correctly specified and our estimation is reliable.\n\n\n\nMethod\nMLE Value\n\n\n\n\nAnalytical MLE (mean of Y)\n3.6847\n\n\nNumerical MLE (optimize)\n3.6847\n\n\n\n\n\n\nNext, we extend our simple Poisson model to a Poisson Regression Model such that \\(Y_i = \\text{Poisson}(\\lambda_i)\\) where \\(\\lambda_i = \\exp(X_i'\\beta)\\). The interpretation is that the success rate of patent awards is not constant across all firms (\\(\\lambda\\)) but rather is a function of firm characteristics \\(X_i\\). Specifically, we will use the covariates age, age squared, region, and whether the firm is a customer of Blueprinty.\ntodo: Update your likelihood or log-likelihood function with an additional argument to take in a covariate matrix X. Also change the parameter of the model from lambda to the beta vector. In this model, lambda must be a positive number, so we choose the inverse link function g_inv() to be exp() so that \\(\\lambda_i = e^{X_i'\\beta}\\). For example:\npoisson_regression_likelihood &lt;- function(beta, Y, X){\n   ...\n}\ntodo: Use your function along with R’s optim() or Python’s sp.optimize() to find the MLE vector and the Hessian of the Poisson model with covariates. Specifically, the first column of X should be all 1’s to enable a constant term in the model, and the subsequent columns should be age, age squared, binary variables for all but one of the regions, and the binary customer variable. Use the Hessian to find standard errors of the beta parameter estimates and present a table of coefficients and standard errors.\ntodo: Check your results using R’s glm() function or Python sm.GLM() function.\ntodo: Interpret the results.\ntodo: What do you conclude about the effect of Blueprinty’s software on patent success? Because the beta coefficients are not directly interpretable, it may help to create two fake datasets: X_0 and X_1 where X_0 is the X data but with iscustomer=0 for every observation and X_1 is the X data but with iscustomer=1 for every observation. Then, use X_0 and your fitted model to get the vector of predicted number of patents (y_pred_0) for every firm in the dataset, and use X_1 to get Y_pred_1 for every firm. Then subtract y_pred_1 minus y_pred_0 and take the average of that vector of differences."
  },
  {
    "objectID": "blog/project3/index.html#blueprinty-case-study",
    "href": "blog/project3/index.html#blueprinty-case-study",
    "title": "Poisson Regression Examples",
    "section": "",
    "text": "Blueprinty is a small firm that makes software for developing blueprints specifically for submitting patent applications to the US patent office. Their marketing team would like to make the claim that patent applicants using Blueprinty’s software are more successful in getting their patent applications approved. Ideal data to study such an effect might include the success rate of patent applications before using Blueprinty’s software and after using it. Unfortunately, such data is not available.\nHowever, Blueprinty has collected data on 1,500 mature (non-startup) engineering firms. The data include each firm’s number of patents awarded over the last 5 years, regional location, age since incorporation, and whether or not the firm uses Blueprinty’s software. The marketing team would like to use this data to make the claim that firms using Blueprinty’s software are more successful in getting their patent applications approved.\n\n\n\n\n\nCode\nimport pandas as pd\ndf = pd.read_csv('blueprinty.csv')\ndf.head()\n\n\n\n\nCode\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ndf = pd.read_csv('blueprinty.csv')\nmeans = df.groupby(\"iscustomer\")[\"patents\"].mean().reset_index()\nmeans.columns = [\"Customer Status\", \"Mean Patents\"]\n\nplt.figure(figsize=(10, 5))\n\nsns.histplot(data=df, x=\"patents\", hue=\"iscustomer\", bins=30,\n             element=\"step\", stat=\"density\", common_norm=False,\n             palette={0: \"skyblue\", 1: \"orange\"}, legend=True)\n\nplt.title(\"Histogram of Patents by Customer Status\")\nplt.xlabel(\"Number of Patents\")\nplt.ylabel(\"Density\")\nplt.legend(title=\"Customer Status\", labels=[\"Non-Customer\", \"Customer\"])\n\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\nCustomer Status\nMean Patents\n\n\n\n\nNon-Customer\n3.473013\n\n\nCustomer\n4.133056\n\n\n\nFrom the chart and table, we can see that Blueprinty customers tend to have more patents than non-customers. On average, customers have 4.13 patents, while non-customers have 3.47. The histogram shows that customers are more likely to appear in the higher end of the distribution.\nHowever, it’s important to remember that customers are not randomly selected. That means we cannot say for sure that being a customer causes someone to have more patents. It’s possible that customers are already different before joining—perhaps they are more experienced, innovative, or come from regions or industries with higher patent activity.\n\n\nCode\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\ndf = pd.read_csv(\"blueprinty.csv\") \n\nmean_age = df.groupby(\"iscustomer\")[\"age\"].mean().reset_index()\nmean_age.columns = [\"Customer Status\", \"Mean Age\"]\n\nregion_counts = pd.crosstab(df[\"region\"], df[\"iscustomer\"])\nregion_counts.columns = [\"Non-Customer\", \"Customer\"]\nregion_props = region_counts.div(region_counts.sum(axis=0), axis=1).round(3) \n\nplt.figure(figsize=(10, 4))\nsns.histplot(data=df, x=\"age\", hue=\"iscustomer\", bins=20, palette=[\"orange\", \"skyblue\"], element=\"step\")\nplt.title(\"Age Distribution by Customer Status\")\nplt.xlabel(\"Age\")\nplt.ylabel(\"Count\")\nplt.legend(title=\"Customer Status\", labels=[\"Non-Customer\", \"Customer\"])\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\nCustomer Status\nMean Age\n\n\n\n\nNon-Customer (0)\n26.10\n\n\nCustomer (1)\n26.90\n\n\n\nCustomers tend to be slightly older than non-customers. The age distribution plot shows that customers are more concentrated in the 20–35 age range, while non-customers are more evenly spread out. Although the difference is modest, it suggests that age may play a role in who becomes a customer, and should be considered when comparing outcomes like patent ownership.\n\n\nCode\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\ndf = pd.read_csv(\"blueprinty.csv\") \n\nregion_counts = pd.crosstab(df[\"region\"], df[\"iscustomer\"])\nregion_counts.columns = [\"Non-Customer\", \"Customer\"]\nregion_props = region_counts.div(region_counts.sum(axis=0), axis=1).round(3) \n\nregion_props.plot(kind=\"bar\", figsize=(10, 5), color=[\"#fdbf6f\", \"#a6cee3\"])  \nplt.title(\"Region Distribution by Customer Status\")\nplt.xlabel(\"Region\")\nplt.ylabel(\"Proportion within Group\")\nplt.legend(title=\"Customer Status\")\nplt.xticks(rotation=45)\nplt.tight_layout()\n\n\n\n\n\n\n\n\n\n\n\n\nRegion\nNon-Customer\nCustomer\n\n\n\n\nMidwest\n0.184\n0.077\n\n\nNortheast\n0.268\n0.682\n\n\nNorthwest\n0.155\n0.060\n\n\nSouth\n0.153\n0.073\n\n\nSouthwest\n0.240\n0.108\n\n\n\nThere are also notable differences in regional distribution. Customers are overwhelmingly concentrated in the Northeast (68%), whereas non-customers are more evenly distributed across regions, especially in the Midwest and Southwest. This uneven geographic pattern indicates that customer status is not random and may be influenced by location-based factors. As with age, region should be taken into account when analyzing differences between customers and non-customers.\n\n\n\nSince our outcome variable of interest can only be small integer values per a set unit of time, we can use a Poisson density to model the number of patents awarded to each engineering firm over the last 5 years. We start by estimating a simple Poisson model via Maximum Likelihood.\nSuppose we observe independent draws \\(Y_1, Y_2, \\dots, Y_n \\sim \\text{Poisson}(\\lambda)\\),\nwhere the probability mass function of the Poisson distribution is:\n\\(f(Y_i \\mid \\lambda) = \\dfrac{e^{-\\lambda} \\lambda^{Y_i}}{Y_i!}\\)\nThen, the likelihood function for the full sample is:\n\\(\\mathcal{L}(\\lambda) = \\prod_{i=1}^{n} f(Y_i \\mid \\lambda)\n= \\prod_{i=1}^{n} \\dfrac{e^{-\\lambda} \\lambda^{Y_i}}{Y_i!}\n= e^{-n\\lambda} \\lambda^{\\sum_{i=1}^{n} Y_i} \\prod_{i=1}^{n} \\dfrac{1}{Y_i!}\\)\nSince it’s easier to work with, we usually take the logarithm of the likelihood function.\nThis gives us the log-likelihood:\n\\(\\log \\mathcal{L}(\\lambda) = \\sum_{i=1}^{n} \\left( -\\lambda + Y_i \\log \\lambda - \\log(Y_i!) \\right)\n= -n\\lambda + \\left( \\sum_{i=1}^{n} Y_i \\right) \\log \\lambda - \\sum_{i=1}^{n} \\log(Y_i!)\\)\n\nTo better understand the relationship between λ (lambda) and the observed data, we now walk through a full maximum likelihood estimation process for the Poisson model.\n\n\nCode\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.optimize import minimize_scalar\nfrom scipy.special import gammaln\nimport pandas as pd\n\ndf = pd.read_csv(\"blueprinty.csv\")\nY = df[\"patents\"].values  \n\n# ---- Step 1: Define log-likelihood function ----\ndef poisson_loglikelihood(lam, Y):\n    if lam &lt;= 0:\n        return -np.inf\n    return np.sum(Y * np.log(lam) - lam - gammaln(Y + 1))\n\n# ---- Step 2: Plot lambda vs log-likelihood ----\nlambdas = np.linspace(0.1, 10, 200)\nloglik_values = [poisson_loglikelihood(lam, Y) for lam in lambdas]\n\nplt.figure(figsize=(8, 5))\nplt.plot(lambdas, loglik_values, label=\"Log-Likelihood\")\nplt.axvline(x=np.mean(Y), color='red', linestyle='--', label='MLE (mean of Y)')\nplt.title(\"Poisson Log-Likelihood vs Lambda\")\nplt.xlabel(\"Lambda\")\nplt.ylabel(\"Log-Likelihood\")\nplt.legend()\nplt.show()\n\n# ---- Step 3: Analytical MLE solution ----\nlambda_mle_analytical = np.mean(Y)\n\n# ---- Step 4: Numerical MLE using optimization ----\nneg_loglik = lambda lam: -poisson_loglikelihood(lam, Y)\nopt_result = minimize_scalar(neg_loglik, bounds=(0.01, 20), method='bounded')\n\nlambda_mle_numerical = opt_result.x\n\n# Collect results\nresults = {\n    \"Analytical MLE (mean of Y)\": round(lambda_mle_analytical, 4),\n    \"Numerical MLE (optimize)\": round(lambda_mle_numerical, 4)\n}\n\n\n\n\n\n\n\n\n\nThe plot above shows how the Poisson log-likelihood changes as we vary \\(\\lambda\\), the expected number of patents per firm. The curve reaches its peak at \\(\\lambda = 3.6847\\), which is the value that makes the observed data most likely — this is our Maximum Likelihood Estimate (MLE).\nThe table below confirms that both the analytical solution (sample mean) and the numerical optimization produce exactly the same MLE value. This gives us confidence that our model is correctly specified and our estimation is reliable.\n\n\n\nMethod\nMLE Value\n\n\n\n\nAnalytical MLE (mean of Y)\n3.6847\n\n\nNumerical MLE (optimize)\n3.6847\n\n\n\n\n\n\nNext, we extend our simple Poisson model to a Poisson Regression Model such that \\(Y_i = \\text{Poisson}(\\lambda_i)\\) where \\(\\lambda_i = \\exp(X_i'\\beta)\\). The interpretation is that the success rate of patent awards is not constant across all firms (\\(\\lambda\\)) but rather is a function of firm characteristics \\(X_i\\). Specifically, we will use the covariates age, age squared, region, and whether the firm is a customer of Blueprinty.\ntodo: Update your likelihood or log-likelihood function with an additional argument to take in a covariate matrix X. Also change the parameter of the model from lambda to the beta vector. In this model, lambda must be a positive number, so we choose the inverse link function g_inv() to be exp() so that \\(\\lambda_i = e^{X_i'\\beta}\\). For example:\npoisson_regression_likelihood &lt;- function(beta, Y, X){\n   ...\n}\ntodo: Use your function along with R’s optim() or Python’s sp.optimize() to find the MLE vector and the Hessian of the Poisson model with covariates. Specifically, the first column of X should be all 1’s to enable a constant term in the model, and the subsequent columns should be age, age squared, binary variables for all but one of the regions, and the binary customer variable. Use the Hessian to find standard errors of the beta parameter estimates and present a table of coefficients and standard errors.\ntodo: Check your results using R’s glm() function or Python sm.GLM() function.\ntodo: Interpret the results.\ntodo: What do you conclude about the effect of Blueprinty’s software on patent success? Because the beta coefficients are not directly interpretable, it may help to create two fake datasets: X_0 and X_1 where X_0 is the X data but with iscustomer=0 for every observation and X_1 is the X data but with iscustomer=1 for every observation. Then, use X_0 and your fitted model to get the vector of predicted number of patents (y_pred_0) for every firm in the dataset, and use X_1 to get Y_pred_1 for every firm. Then subtract y_pred_1 minus y_pred_0 and take the average of that vector of differences."
  },
  {
    "objectID": "blog/project3/index.html#airbnb-case-study",
    "href": "blog/project3/index.html#airbnb-case-study",
    "title": "Poisson Regression Examples",
    "section": "AirBnB Case Study",
    "text": "AirBnB Case Study\n\nIntroduction\nAirBnB is a popular platform for booking short-term rentals. In March 2017, students Annika Awad, Evan Lebo, and Anna Linden scraped of 40,000 Airbnb listings from New York City. The data include the following variables:\n\n\n\n\n\n\nVariable Definitions\n\n\n\n\n\n- `id` = unique ID number for each unit\n- `last_scraped` = date when information scraped\n- `host_since` = date when host first listed the unit on Airbnb\n- `days` = `last_scraped` - `host_since` = number of days the unit has been listed\n- `room_type` = Entire home/apt., Private room, or Shared room\n- `bathrooms` = number of bathrooms\n- `bedrooms` = number of bedrooms\n- `price` = price per night (dollars)\n- `number_of_reviews` = number of reviews for the unit on Airbnb\n- `review_scores_cleanliness` = a cleanliness score from reviews (1-10)\n- `review_scores_location` = a \"quality of location\" score from reviews (1-10)\n- `review_scores_value` = a \"quality of value\" score from reviews (1-10)\n- `instant_bookable` = \"t\" if instantly bookable, \"f\" if not\n\n\n\n\nimport pandas as pd\ndf = pd.read_csv('airbnb.csv')\ndf.head()\n\n\n\n\n\n\n\n\nUnnamed: 0\nid\ndays\nlast_scraped\nhost_since\nroom_type\nbathrooms\nbedrooms\nprice\nnumber_of_reviews\nreview_scores_cleanliness\nreview_scores_location\nreview_scores_value\ninstant_bookable\n\n\n\n\n0\n1\n2515\n3130\n4/2/2017\n9/6/2008\nPrivate room\n1.0\n1.0\n59\n150\n9.0\n9.0\n9.0\nf\n\n\n1\n2\n2595\n3127\n4/2/2017\n9/9/2008\nEntire home/apt\n1.0\n0.0\n230\n20\n9.0\n10.0\n9.0\nf\n\n\n2\n3\n3647\n3050\n4/2/2017\n11/25/2008\nPrivate room\n1.0\n1.0\n150\n0\nNaN\nNaN\nNaN\nf\n\n\n3\n4\n3831\n3038\n4/2/2017\n12/7/2008\nEntire home/apt\n1.0\n1.0\n89\n116\n9.0\n9.0\n9.0\nf\n\n\n4\n5\n4611\n3012\n4/2/2017\n1/2/2009\nPrivate room\nNaN\n1.0\n39\n93\n9.0\n8.0\n9.0\nt\n\n\n\n\n\n\n\ntodo: Assume the number of reviews is a good proxy for the number of bookings. Perform some exploratory data analysis to get a feel for the data, handle or drop observations with missing values on relevant variables, build one or more models (e.g., a poisson regression model for the number of bookings as proxied by the number of reviews), and interpret model coefficients to describe variation in the number of reviews as a function of the variables provided."
  }
]